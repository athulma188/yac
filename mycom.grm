%%
%term
    EOF 
  | ID of string
  | INT of int  
  | FLOAT of real
  | STRING of string
  | CHARC of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | IF | ELSE | WHILE | FOR 
  | BREAK | CONTINUE | MOD | NOT
  | INTEGER | FLOATV | CHAR 

%nonterm  
	  Prog of Ast.Exp list
	| Sts of Ast.Exp list 
	| St of Ast.Exp
	| ExpSt of Ast.Exp
	| ComSt of Ast.Exp
	| SelSt of Ast.Exp
	| ItSt of Ast.Exp
	| SpcSt of Ast.Exp 
	| Decl of Ast.Exp 
	| TypeV of Ast.typev  
	| Exp of Ast.Exp
	| SimExp of Ast.Exp
	| AndExp of Ast.Exp
	| UnRExp of Ast.Exp
	| RelExp of Ast.Exp
	| SumExp of Ast.Exp
	| SumOp of Ast.BinOp
	| RelOp of Ast.BinOp
	| Term of Ast.Exp
	| MulOp of Ast.BinOp
	| UnaryExp of Ast.Exp
	| UnaryOp of Ast.UnOp
	| Fac of Ast.Exp
	| Constant of Ast.Exp
	| Decls of Ast.Exp list
	| Params of  Ast.Exp list
	| ParamList of Ast.Exp list
	| Param of Ast.Exp
	| VarDecl of Ast.Exp
	| FunDecl of Ast.Exp
	  
%pos int
%verbose
%start Prog
%eop EOF
%noshift EOF
%name MyC

%left OR
%left AND
%left PLUS MINUS
%left TIMES DIVIDE

%keyword WHILE BREAK IF ELSE INTEGER FLOATV CHAR

%prefer ELSE

%%
Prog : Decls                   	(Decls)

				
Sts : St Sts                 	(St :: Sts)
    |                        	([])

St : ExpSt 			(ExpSt)
   | ComSt			(ComSt)
   | SelSt			(SelSt)
   | ItSt                    	(ItSt)
   | SpcSt                   	(SpcSt)
   | Decl			(Decl)

ComSt : LBRACE Sts RBRACE 			(Ast.CompSt(Sts))

SpcSt : BREAK SEMICOLON				(Ast.SpecExp(Ast.Break))
      | CONTINUE SEMICOLON			(Ast.SpecExp(Ast.Continue))

ItSt : WHILE LPAREN SimExp RPAREN St 		(Ast.WhileExp(SimExp,St))

Decls: Decl Decls                               (Decl::Decls)
     |                                          ([])
	    
Decl : VarDecl                                  (VarDecl)
     | FunDecl                                  (FunDecl)
  					
VarDecl: TypeV ID SEMICOLON			(Ast.Declr(TypeV,Ast.Var(ID)))
       | TypeV ID ASSIGN Exp SEMICOLON 		(Ast.DecAss(TypeV, Ast.Var(ID),Exp))

FunDecl: TypeV ID LPAREN Params RPAREN St        (Ast.FunDecl(TypeV,Ast.Fun(ID),Params,St)) 
      

Params : ParamList                              (ParamList)
       |                                        ([])
						    
ParamList : Param COMMA ParamList               (Param::ParamList)
	  | Param                               ([Param])
							    
Param : TypeV ID                                (Ast.Param(TypeV,Ast.Var(ID)))  
						    
TypeV :   INTEGER 				(Ast.INTEGER)
	| FLOATV				(Ast.FLOATV)
	| CHAR					(Ast.CHAR)

SelSt :   IF LPAREN SimExp RPAREN St 		(Ast.IfExp(SimExp,St,Ast.NilExp))
	| IF LPAREN SimExp RPAREN St ELSE St 	(Ast.IfExp(SimExp,St1,St2))
						
ExpSt : Exp SEMICOLON		                (Exp)
      | SEMICOLON		                (Ast.NilExp)

Exp : ID ASSIGN Exp		                (Ast.AssignExp(Ast.Var(ID),Exp))
    | SimExp			                (SimExp)
						
SimExp : SimExp OR AndExp	                (Ast.OpExp(SimExp,Ast.OR,AndExp))
       | AndExp			                (AndExp)

AndExp : AndExp AND UnRExp 	                (Ast.OpExp(AndExp,Ast.AND,UnRExp))   
       | UnRExp			                (UnRExp)
						
UnRExp : NOT UnRExp		                (Ast.UnaExp(Ast.NOT,UnRExp))
       | RelExp			                (RelExp)

RelExp : SumExp RelOp SumExp  	                (Ast.OpExp(SumExp1,RelOp,SumExp2))
	| SumExp		                (SumExp)
						
RelOp :   LE 			                (Ast.LE)
	| LT			                (Ast.LT)
	| GT			                (Ast.GT)
	| GE			                (Ast.GE)
	| EQ			                (Ast.EQ)
	| NEQ			                (Ast.NEQ)

SumExp : SumExp SumOp Term	                (Ast.OpExp(SumExp,SumOp,Term))
	| Term			                (Term)

SumOp : PLUS 			                (Ast.PLUS)
	| MINUS			                (Ast.MINUS)

Term : 	Term MulOp UnaryExp	                (Ast.OpExp(Term,MulOp,UnaryExp))
	| UnaryExp		                (UnaryExp)

MulOp : TIMES			                (Ast.TIMES)
	| DIVIDE		                (Ast.DIVIDE)
	| MOD			                (Ast.MOD)
				
UnaryExp: UnaryOp UnaryExp	                (Ast.UnaExp(UnaryOp,UnaryExp))
	| Fac			                (Fac)

UnaryOp : MINUS			                (Ast.UMINUS)

Fac : 	ID			                (Ast.Variable(Ast.Var(ID)))
	| LPAREN Exp RPAREN	                (Exp)
	| Constant		                (Constant)

Constant:  INT 			                (Ast.Const(Ast.Int(INT)))
	| FLOAT			                (Ast.Const(Ast.Float(FLOAT)))
	| CHARC                                 (Ast.Const(Ast.Char(CHARC)))
	| STRING		                (Ast.Const(Ast.String(STRING)))

				
